initialize() {
	initializeSLiMOptions(nucleotideBased=T);
	initializeAncestralNucleotides(randomNucleotides(asInteger(L)));
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(mu));
	initializeMutationType("m2", h, "f", s); // introduced mutation
	initializeGenomicElement(g1, 0, asInteger(L)-1);
	initializeRecombinationRate(R);
}

1 early() {
	// save this run's identifier, used to save and restore
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", N);

	// reschedule simulation end
	community.rescheduleScriptBlock(s1, start=10*asInteger(N), end=10*asInteger(N));
	community.rescheduleScriptBlock(s2, start=10*asInteger(N), end=10000000);
}

s1 1000 late() {
	// save the state of the simulation
	catn("Saving simulation state...");
	sim.outputFull(tempdir() + "slim_" + simID + ".txt");
	// introduce the sweep mutation
	catn("Adding sweep...");
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m2, asInteger(L/2));
}

s2 1000:100000 late() {
	if (sim.countOfMutationsOfType(m2) == 0) {
		fixed = (sum(sim.substitutions.mutationType == m2) == 1);
		if (fixed) {
			cat(simID + ": FIXED\n");
			// random sample of individuals, grab an extra individual to use as a refernce
			catn("Randomly sampling population...");
			gs = p1.sampleIndividuals(asInteger(n) + 1).genomes;

			// output vcf of sample
			catn("Outputting vcf...");
			gs.outputVCF(filePath = paste("slim_" + ID + ".vcf", sep = ""), simplifyNucleotides=T);

			// output genome sequences of sample
			catn("Outputting fasta...");
			i = 1;
			for (g in gs){
				writeFile(paste("slim_" + ID + ".fasta", sep = ""), ">" + i, append = T);
				writeFile(paste("slim_" + ID + ".fasta", sep = ""), paste(g.nucleotides(format="char"), sep = ""), append = T);
				i = i + 1;
			}

			sim.simulationFinished();
		}
		else {
			cat(simID + ": LOST â€“ RESTARTING\n");
			// go back to just before sweep introduction
			sim.readFromPopulationFile(tempdir() + "slim_" + simID + ".txt");
			// start a newly seeded run
			setSeed(rdunif(1, 0, asInteger(2^62) - 1));
			// re-introduce the sweep mutation
			target = sample(p1.genomes, 1);
			target.addNewDrawnMutation(m2, asInteger(L/2));
		}
	}
}